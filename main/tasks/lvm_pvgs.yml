---

- name: Root Disk Short ID
  ansible.builtin.set_fact:
    root_sd_id: "{{ root_sd.replace('/dev/', '') }}"
    vg_device_map: {}

- name: Gather list of available disks
  ansible.builtin.set_fact:
    free_disk_ids: >-
      {{
        ansible_devices.keys()
        | select('match', '^[sv]d[a-z]$')
        | reject('equalto', root_sd_id)
      }}

- name: Build dictionary of device sizes
  ansible.builtin.set_fact:
    usable_devices: >-
      {{
        dict(
          free_disk_ids | map('extract', ansible_devices, 'size')
          | map('regex_search', '([0-9.]+)') | map('int')
          | zip(free_disk_ids) | map('reverse') | list
        )
      }}

- name: Sort volume groups by size in descending order
  ansible.builtin.set_fact:
    sorted_volume_groups: "{{ volume_groups | dict2items | sort(attribute='value.size_gb', reverse=True) }}"

- name: Assign devices to volume groups
  ansible.builtin.set_fact:
    vg_device_map: >-
      {{
        vg_device_map | combine({
          item.value.name:
            (usable_devices
            | dict2items
            | selectattr('value', '>=', item.value.size_gb)
            | sort(attribute='value') | first).key
        })
      }}
  loop: "{{ sorted_volume_groups }}"
  loop_control:
    label: "{{ item.key }}"
  when: (usable_devices | dict2items | selectattr('value', '>=', item.value.size_gb) | first) is defined

- name: LVM | Create volume group
  community.general.lvg:
    vg: "{{ item.key }}"
    pvs: "/dev/{{ item.value }}"
  loop: "{{ vg_device_map | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

